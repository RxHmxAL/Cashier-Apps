#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.3
#  in conjunction with Tcl version 8.6
#    Jul 18, 2020 08:01:58 AM WIB  platform: Linux

import sys

try:
    import Tkinter as tk
    from tkinter import *
except ImportError:
    import tkinter as tk
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import test_support
from ttkthemes import ThemedStyle


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    
    style = ThemedStyle(root)    
    style.set_theme('breeze')
    test_support.set_Tk_var()
    top = Toplevel1 (root)
    test_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    test_support.set_Tk_var()
    top = Toplevel1 (w)
    test_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("880x550")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1, 1)
        top.title("Cashier")
        top.configure(highlightcolor="black")

        self.Frame_Inputan = ttk.Frame(top)
        self.Frame_Inputan.place(relx=0.013, rely=0.022, relheight=0.239
                , relwidth=0.981)
        self.Frame_Inputan.configure(relief='flat')
        self.Frame_Inputan.configure(borderwidth="2")
        self.Frame_Inputan.configure(relief="flat")

        self.lf_name = ttk.Labelframe(self.Frame_Inputan)
        self.lf_name.place(relx=0.012, rely=0.15, relheight=0.608
                , relwidth=0.311)
        self.lf_name.configure(relief='')
        self.lf_name.configure(text='''Item''')

        self.e_name = ttk.Entry(self.lf_name)
        self.e_name.place(relx=0.041, rely=0.384, relheight=0.384, relwidth=0.884
                , bordermode='ignore')
        self.e_name.configure(textvariable=test_support.ev_nama)
        self.e_name.configure(background="#727272")
        self.e_name.configure(takefocus="")
        self.e_name.configure(cursor="xterm")

        self.lf_amount = ttk.Labelframe(self.Frame_Inputan)
        self.lf_amount.place(relx=0.346, rely=0.15, relheight=0.608
                , relwidth=0.311)
        self.lf_amount.configure(relief='')
        self.lf_amount.configure(text='''Amount''')

        self.e_amount = ttk.Entry(self.lf_amount)
        self.e_amount.place(relx=0.041, rely=0.384, relheight=0.384
                , relwidth=0.888, bordermode='ignore')
        self.e_amount.configure(textvariable=test_support.ev_jumlah)
        self.e_amount.configure(background="#727272")
        self.e_amount.configure(takefocus="")
        self.e_amount.configure(cursor="xterm")

        self.lf_price = ttk.Labelframe(self.Frame_Inputan)
        self.lf_price.place(relx=0.683, rely=0.15, relheight=0.608
                , relwidth=0.309)
        self.lf_price.configure(relief='')
        self.lf_price.configure(text='''Price''')

        self.e_price = ttk.Entry(self.lf_price)
        self.e_price.place(relx=0.041, rely=0.384, relheight=0.384
                , relwidth=0.888, bordermode='ignore')
        self.e_price.configure(textvariable=test_support.ev_harga)
        self.e_price.configure(background="#727272")
        self.e_price.configure(takefocus="")
        self.e_price.configure(cursor="xterm")

        self.frame_btn = ttk.Frame(top)
        self.frame_btn.place(relx=0.841, rely=0.299, relheight=0.687
                , relwidth=0.151)
        self.frame_btn.configure(relief='groove')
        self.frame_btn.configure(borderwidth="2")
        self.frame_btn.configure(relief="groove")

        self.btn_add = ttk.Button(self.frame_btn)
        self.btn_add.place(relx=0.075, rely=0.029, height=28, width=103)
        self.btn_add.configure(command=test_support.add)
        self.btn_add.configure(takefocus="")
        self.btn_add.configure(text='''Add''')
        self.btn_add.configure(cursor="X_cursor")

        self.btn_remove = ttk.Button(self.frame_btn)
        self.btn_remove.place(relx=0.083, rely=0.165, height=28, width=103)
        self.btn_remove.configure(command=test_support.remove)
        self.btn_remove.configure(takefocus="")
        self.btn_remove.configure(text='''Remove''')
        self.btn_remove.configure(cursor="X_cursor")

        self.btn_exp = ttk.Button(self.frame_btn)
        self.btn_exp.place(relx=0.083, rely=0.296, height=28, width=103)
        self.btn_exp.configure(command=test_support.export)
        self.btn_exp.configure(takefocus="")
        self.btn_exp.configure(text='''Export''')
        self.btn_exp.configure(cursor="X_cursor")

        self.btn_exit = ttk.Button(self.frame_btn)
        self.btn_exit.place(relx=0.075, rely=0.899, height=28, width=113)
        self.btn_exit.configure(command=test_support.exit)
        self.btn_exit.configure(takefocus="")
        self.btn_exit.configure(text='''Exit''')
        self.btn_exit.configure(cursor="X_cursor")

        self.lt_tota = ttk.Labelframe(self.frame_btn)
        self.lt_tota.place(relx=0.075, rely=0.696, relheight=0.159
                , relwidth=0.827)
        self.lt_tota.configure(relief='')
        self.lt_tota.configure(text='''Total''')
        self.lt_tota.configure(takefocus="0")

        self.l_total = tk.Label(self.lt_tota)
        self.l_total.place(relx=0.091, rely=0.364, height=21, width=89
                , bordermode='ignore')
        self.l_total.configure(activebackground="#f9f9f9")
        self.l_total.configure(textvariable=test_support.ev_total)

        self.frame_treeview = ttk.Frame(top)
        self.frame_treeview.place(relx=0.013, rely=0.311, relheight=0.677
                , relwidth=0.811)
        self.frame_treeview.configure(relief="flat")
        self.frame_treeview.configure(borderwidth="2")
        self.frame_treeview.configure(relief="flat")
        self.frame_treeview.configure(takefocus="0")

        self.style.configure('Treeview',  font="TkDefaultFont")
        self.trv = ScrolledTreeView(self.frame_treeview)
        self.trv.place(relx=0.0, rely=0.0, relheight=0.971, relwidth=0.98)
        self.trv.configure(columns="name Col1 Col2 Col3")
        self.trv.configure(takefocus="0")
        # build_treeview_support starting.
        self.trv.heading("#0",text="â€¢")
        self.trv.heading("#0",anchor="center")
        self.trv.column("#0",width="30")
        self.trv.column("#0",minwidth="10")
        self.trv.column("#0",stretch="1")
        self.trv.column("#0",anchor="w")
        self.trv.heading("name",text="Item")
        self.trv.heading("name",anchor="center")
        self.trv.column("name",width="176")
        self.trv.column("name",minwidth="20")
        self.trv.column("name",stretch="1")
        self.trv.column("name",anchor="center")
        self.trv.heading("Col1",text="Amount")
        self.trv.heading("Col1",anchor="center")
        self.trv.column("Col1",width="146")
        self.trv.column("Col1",minwidth="20")
        self.trv.column("Col1",stretch="1")
        self.trv.column("Col1",anchor="e")
        self.trv.heading("Col2",text="Price")
        self.trv.heading("Col2",anchor="center")
        self.trv.column("Col2",width="170")
        self.trv.column("Col2",minwidth="20")
        self.trv.column("Col2",stretch="1")
        self.trv.column("Col2",anchor="e")
        self.trv.heading("Col3",text="Total")
        self.trv.heading("Col3",anchor="center")
        self.trv.column("Col3",width="164")
        self.trv.column("Col3",minwidth="20")
        self.trv.column("Col3",stretch="1")
        self.trv.column("Col3",anchor="e")

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.013, rely=0.281, relwidth=0.98)
        self.TSeparator1.configure(takefocus="0")

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(relx=0.83, rely=0.281, relheight=0.699)
        self.TSeparator2.configure(orient="vertical")
        self.TSeparator2.configure(takefocus="0")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





